Problem 1
(a) int=42
(b) int=42
(c) This expression is not well typed because the elements in the array do not all have the same type.  1, 9, 4, and 2 are of type int while -3. is of type float.  An array expects all of its elements to be of the same type.
(d) int list=[2; 4; 6; 8; 10]
(e) (string * string) list=[("zar"), ("doz")]
(f) unit=()
(g) int option=Some 3110
(h) int=1764
(i) This expression is not well typed because the function f expects an int, but it perceives f f 10 as f(f,10) with both f and 10 being arguments.
(j) int=12

Problem 2
(a) 1
(b) ["hello world"]
(c) let return_head (lst: float list): float = 
	3.2
(d) let return_int (x: int option): int = 
	3
(e) let return_list (lst: int list) (lst1: int list): int list = [3]

(f) let g = fun f -> f[1] @ [1]

(g) let return_list (lst: int list) (lst1: int list): int list = [3]

(h) let f (b,c) = 
match c with
[] -> [(b+1,'a')]
| h::t -> [((b+1),h)]

(i) {hour=4; minute=27; am_pm="am"}

(j) let f(t:time) = let {hour=x; minute=y; am_pm= z} = t
in x


Problem 3
(* This method takes two lists and returns a list of their sorted values *)
let rec combine_sort ((a: int list), (b: int list)) =
  match (a,b) with
    ([],[]) -> []
  | ([], b) -> b
  | (a, []) -> a
  | (a,b) -> if List.hd(a)<List.hd(b) then List.hd(a)::zardoz(List.tl(a),b)
             else List.hd(b)::zardoz(a,List.tl(b))
